<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ARM on Our Embeddeds</title>
    <link>https://ourembeddeds.github.io/categories/arm/</link>
    <description>Recent content in ARM on Our Embeddeds</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Sep 2020 12:19:37 -0300</lastBuildDate><atom:link href="https://ourembeddeds.github.io/categories/arm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Armv7m Startup (2) - Linker script</title>
      <link>https://ourembeddeds.github.io/blog/2020/09/21/arm7m-startup-ldscript/</link>
      <pubDate>Mon, 21 Sep 2020 12:19:37 -0300</pubDate>
      
      <guid>https://ourembeddeds.github.io/blog/2020/09/21/arm7m-startup-ldscript/</guid>
      <description>&lt;p&gt;In the previous article, we learned how to write an efficient
startup code and play with the options of the compiler to produce
the desired code from C, but it is still necessary to put the code
in the correct memory locations to produce an executable suitable
for the cortex-m.&lt;/p&gt;
&lt;p&gt;In the present article, we will work with the linker script to join all
our code into a single well structured executable.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Armv7m Startup</title>
      <link>https://ourembeddeds.github.io/blog/2020/09/05/armv7m-startup/</link>
      <pubDate>Sat, 05 Sep 2020 12:19:37 -0300</pubDate>
      
      <guid>https://ourembeddeds.github.io/blog/2020/09/05/armv7m-startup/</guid>
      <description>&lt;p&gt;One of the most successful families of microcontrollers has been
the cortex-m in its different versions (m0, m0+, m3, m4, m7,
m33, etc), and one of the main reasons of its success is its
simple boot process. In this article, we will travel through the
magical land of code writing and look around the different implementations
across some vendors, culminating with a proposed vendor-neutral startup
schema with many advantages for your projects.&lt;/p&gt;
&lt;p&gt;In this series of articles I will try to explain the tricks around
code compilation, linker scripts and build systems, proposing
a vendor neutral startup system for your cortex-m project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elf Loader</title>
      <link>https://ourembeddeds.github.io/blog/2020/08/16/elf-loader/</link>
      <pubDate>Sun, 16 Aug 2020 15:08:33 -0300</pubDate>
      
      <guid>https://ourembeddeds.github.io/blog/2020/08/16/elf-loader/</guid>
      <description>&lt;p&gt;Perfect, you&amp;rsquo;ve created your embedded system, provided it with an
external storage system, created a serial terminal to test things
out, and then started your journey through routine&amp;hellip; testing as
if you were sitting on an old 70&amp;rsquo;s ticker while you listen to
&amp;ldquo;Sheer Heart Attack&amp;rdquo; by Queen (a plus for the sound without a
synth)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
